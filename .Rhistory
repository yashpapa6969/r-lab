data(mtcars)
View(mtcars)
View(mtcars)
Data_Cars <- mtcars
# Information about the data set
mtcars?
# create a variable of the mtcars data set for better
organization
# Information about the data set
# create a variable of the mtcars data set for better
organization
names(Data_Cars)
source("~/StudioProjects/yash-r/mtcars.R")
source("~/StudioProjects/yash-r/mtcars.R")
min(Data_Cars$hp)
library(forecast)
install.packages("forecast")
summary(Data_Cars)
sales_data <- data.frame(
Month = seq(as.Date("2023-01-01"), as.Date("2023-06-01"), by =
"months"),
Sales = c(12000, 15000, 18000, 16000, 20000, 22000)
)
Data_Cars <- mtcars
quantile(Data_Cars$wt, c(0.75))
source("~/StudioProjects/yash-r/mtcars.R")
source("~/StudioProjects/yash-r/mtcars.R")
sales_data <- data.frame(
Month = seq(as.Date("2023-01-01"), as.Date("2023-06-01"), by =
"months"),
Sales = c(12000, 15000, 18000, 16000, 20000, 22000)
)
sales_ts <- ts(sales_data$Sales, frequency = 12,start=c(2023,1))
source("~/StudioProjects/yash-r/customer.R")
# Create a histogram
ggplot(purchase_data, aes(x = PurchaseAmount)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black") +
labs(title = "Distribution of Purchase Amounts", x = "Purchase
Amount", y = "Frequency")
install.packages("ggplot2")
cat("Median Purchase Amount:", median_purchase, "\n")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
install.packages("dplyr")
# Example customer purchase data
purchase_data <- data.frame(
CustomerID = c(101, 102, 103, 104, 105),
PurchaseAmount = c(150, 200, 120, 300, 80)
)
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
source("~/StudioProjects/yash-r/customer.R")
# Display results
cat("Mean Purchase Amount:", mean_purchase, "\n")
library(dplyr)
library(ggplot2)
# Example customer purchase data
purchase_data <- data.frame(
CustomerID = c(101, 102, 103, 104, 105),
PurchaseAmount = c(150, 200, 120, 300, 80)
)
# Calculate statistical measures
mean_purchase <- mean(purchase_data$PurchaseAmount)
median_purchase <- median(purchase_data$PurchaseAmount)
sd_purchase <- sd(purchase_data$PurchaseAmount)
q1_purchase <- quantile(purchase_data$PurchaseAmount, probs =
0.25)
q3_purchase <- quantile(purchase_data$PurchaseAmount, probs =
0.75)
# Display results
cat("Mean Purchase Amount:", mean_purchase, "\n")
cat("Median Purchase Amount:", median_purchase, "\n")
cat("Standard Deviation of Purchase Amounts:", sd_purchase, "\n")
cat("1st Quartile of Purchase Amounts:", q1_purchase, "\n")
cat("3rd Quartile of Purchase Amounts:", q3_purchase, "\n")
# Create a histogram
ggplot(purchase_data, aes(x = PurchaseAmount)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black") +
labs(title = "Distribution of Purchase Amounts", x = "Purchase
Amount", y = "Frequency")
source("~/StudioProjects/yash-r/customer.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
if (days_overdue > 30) {
cat("Fine exceeds the maximum cap. Please contact the
library.\n")
} else {
cat("Please pay the fine within the specified period.\n")
}
if (fine_amount == 0) {
cat("No fine. Thank you for returning the book on time!\n")
} else {
if (days_overdue > 30) {
cat("Fine exceeds the maximum cap. Please contact the
library.\n")
} else {
cat("Please pay the fine within the specified period.\n")
}
}
5
# Function to calculate library fine
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0 # No fine for the first 7 days
} else if (days_overdue <= 30) {
fine_per_day <- 2 # Fine per day after 7 days
fine <- (days_overdue - 7) * fine_per_day
} else {
fine_cap <- 50 # Maximum fine after 30 days
fine <- fine_cap
}
return(fine)
}
# Input number of days overdue
days_overdue <- as.integer(readline("Enter the number of days the book is overdue: "))
# Calculate fine
fine_amount <- calculate_fine(days_overdue)
return(fine)
# Function to calculate library fine
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0 # No fine for the first 7 days
} else if (days_overdue <= 30) {
fine_per_day <- 2 # Fine per day after 7 days
fine <- (days_overdue - 7) * fine_per_day
} else {
fine_cap <- 50 # Maximum fine after 30 days
fine <- fine_cap
}
return(fine)
}
# Input number of days overdue
days_overdue <- as.integer(readline("Enter the number of days the book is overdue: "))
fine_amount <- calculate_fine(days_overdue)
View(calculate_fine)
View(calculate_fine)
View(calculate_fine)
View(calculate_fine)
View(calculate_fine)
View(calculate_fine)
5
5
# Calculate fine
fine_amount <- calculate_fine(days_overdue)
3
# Calculate fine
fine_amount <- calculate_fine(days_overdue)
# Display fine information
cat("Fine Amount:", fine_amount, "\n")
if (fine_amount == 0) {
cat("No fine. Thank you for returning the book on time!\n")
} else {
if (days_overdue > 30) {
cat("Fine exceeds the maximum cap. Please contact the ibrary.\n")
} else {
cat("Please pay the fine within the specified period.\n")
}
}
# Function to calculate library fine
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0 # No fine for the first 7 days
} else if (days_overdue <= 30) {
fine_per_day <- 2 # Fine per day after 7 days
fine <- (days_overdue - 7) * fine_per_day
} else {
fine_cap <- 50 # Maximum fine after 30 days
fine <- fine_cap
}
return(fine)
}
# Input number of days overdue
days_overdue <- as.integer(readline("Enter the number of days the book is overdue: "))
# Calculate fine
fine_amount <- calculate_fine(days_overdue)
View(calculate_fine)
View(calculate_fine)
# Input number of days overdue
days_overdue<- 10
# Calculate fine
fine_amount <- calculate_fine(days_overdue)
# Display fine information
cat("Fine Amount:", fine_amount, "\n")
if (fine_amount == 0) {
cat("No fine. Thank you for returning the book on time!\n")
} else {
if (days_overdue > 30) {
cat("Fine exceeds the maximum cap. Please contact the ibrary.\n")
} else {
cat("Please pay the fine within the specified period.\n")
}
}
# Function to calculate library fine
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0 # No fine for the first 7 days
} else if (days_overdue <= 30) {
fine_per_day <- 2 # Fine per day after 7 days
fine <- (days_overdue - 7) * fine_per_day
} else {
fine_cap <- 50 # Maximum fine after 30 days
fine <- fine_cap
}
return(fine)
}
# Input number of days overdue
days_overdue<- 10
# Calculate fine
fine_amount <- calculate_fine(days_overdue)
# Display fine information
cat("Fine Amount:", fine_amount, "\n")
if (fine_amount == 0) {
cat("No fine. Thank you for returning the book on time!\n")
} else {
if (days_overdue > 30) {
cat("Fine exceeds the maximum cap. Please contact the ibrary.\n")
} else {
cat("Please pay the fine within the specified period.\n")
}
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
avg_scores <- student_data %>%mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3)%>%
select(Name, Average_Score)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
